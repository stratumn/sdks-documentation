(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{75:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return l})),a.d(t,"toc",(function(){return d})),a.d(t,"default",(function(){return b}));var n=a(3),i=a(7),r=(a(0),a(92)),p=a(95),o=a(96),c={title:"\ud83d\udcbe Handling files"},l={unversionedId:"handling-files",id:"handling-files",isDocsHomePage:!1,title:"\ud83d\udcbe Handling files",description:"When providing a data object in an action (via newTrace, appendLink etc.),",source:"@site/docs/handling-files.mdx",slug:"/handling-files",permalink:"/sdks-documentation/docs/handling-files",editUrl:"https://github.com/stratumn/sdks-documentation/docs/handling-files.mdx",version:"current",sidebar:"docs",previous:{title:"\ud83d\ude80 Usage",permalink:"/sdks-documentation/docs/usage"},next:{title:"\ud83d\udc80 Deprecated",permalink:"/sdks-documentation/docs/deprecated"}},d=[],s={toc:d};function b(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"When providing a ",Object(r.b)("inlineCode",{parentName:"p"},"data")," object in an action (via ",Object(r.b)("inlineCode",{parentName:"p"},"newTrace"),", ",Object(r.b)("inlineCode",{parentName:"p"},"appendLink")," etc.),\nyou can embed files that will automatically be uploaded and encrypted for you.\nWe provide two ways for embedding files, depending on the platform your app is running."),Object(r.b)(p.a,{groupId:"choosen-language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"C#",value:"csharp"},{label:"Java",value:"java"}],mdxType:"Tabs"},Object(r.b)(o.a,{value:"js",mdxType:"TabItem"},Object(r.b)("p",null,"In NodeJs, here is how you would do it:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'var { FileWrapper } = require("@stratumn/sdk");\n\nvar state = await sdk.appendLink({\n  prevLink,\n  actionKey,\n  data: {\n    operation: "XYZ shipment departed port for ABC",\n    destination: "ABC",\n    customsCheck: true,\n    customsCertificates: [\n      FileWrapper.fromNodeJsFilePath("/docs/certif_abc.pdf"),\n      FileWrapper.fromNodeJsFilePath("/docs/pic_ea15qw.png"),\n    ],\n    eta: "2019-07-02T12:00:00.000Z",\n  },\n});\n')),Object(r.b)("p",null,"In the browser, assuming you are working with ",Object(r.b)("inlineCode",{parentName:"p"},"File")," objects, you can use:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'var { FileWrapper } = require("@stratumn/sdk");\n\nvar state = await sdk.appendLink({\n  prevLink,\n  actionKey,\n  data: {\n    operation: "XYZ shipment departed port for ABC",\n    destination: "ABC",\n    customsCheck: true,\n    customsCertificates: [\n      FileWrapper.fromBrowserFile(certifFile),\n      FileWrapper.fromBrowserFile(pictureFile),\n    ],\n    eta: "2019-07-02T12:00:00.000Z",\n  },\n});\n')),Object(r.b)("p",null,"Under the hood, all the files are encrypted and uploaded first and the ",Object(r.b)("inlineCode",{parentName:"p"},"FileWrapper")," objects found in the data object are converted to a ",Object(r.b)("inlineCode",{parentName:"p"},"FileRecord")," object, that will look like this:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"{\n  mimetype: 'image/png',\n  digest: '1114c7455d6365dc5431c0a1c1388088b793fd8bdec7',\n  key: 'x/Qr55ABlruIU0E4FoE4iCP0tr4Y1EjCt6bb5iCaugs=',\n  name: 'pic_ea15qw.png',\n  size: 235899\n}\n")),Object(r.b)("p",null,"This record uniquely identifies the corresponding file in our service and is easily serializable.\nIf you look in the ",Object(r.b)("inlineCode",{parentName:"p"},"headLink")," of the returned state, you will see that the ",Object(r.b)("inlineCode",{parentName:"p"},"FileWrapper")," have been converted to ",Object(r.b)("inlineCode",{parentName:"p"},"FileRecord")," types:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"var data = state.headLink.formData();\nconsole.log(data.customCertificates);\n\n// will output:\n// [{\n//     mimetype: 'application/pdf',\n//     digest: '1114a1ec84cee50603eb285f2006c3b42279fd272d87',\n//     key: 'flBg5AAQI/MBGZnXGYEfuwCEexgkCrD1sXPCYqWvjyc=',\n//     name: 'certif_abc.pdf',\n//     size: 86726\n//   },\n//   {\n//     mimetype: 'image/png',\n//     digest: '1114c7455d6365dc5431c0a1c1388088b793fd8bdec7',\n//     key: 'x/Qr55ABlruIU0E4FoE4iCP0tr4Y1EjCt6bb5iCaugs=',\n//     name: 'pic_ea15qw.png',\n//     size: 235899\n//   }\n// ]\n")),Object(r.b)("p",null,"When you retrieve traces with the Sdk, it will not automatically download the files for you. You have to explicitely call a method on the Sdk for that purpose:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"var state = sdk.getTraceState({\n  traceId: thePreviousTraceId,\n});\n\nvar dataWithRecords = state.headLink.formData();\n\nvar dataWithFiles = sdk.downloadFilesInObject(dataWithRecords);\n\nvar [certif, pic] = dataWithFiles.customCertificates;\n\nconsume(certif.decryptedData());\nconsume(pic.decryptedData());\n")),Object(r.b)("p",null,"In this case, ",Object(r.b)("inlineCode",{parentName:"p"},"certif")," and ",Object(r.b)("inlineCode",{parentName:"p"},"pic")," are ",Object(r.b)("inlineCode",{parentName:"p"},"FileWrapper")," objects from which you can extract the raw decrypted data (type ",Object(r.b)("inlineCode",{parentName:"p"},"Buffer"),").")),Object(r.b)(o.a,{value:"csharp",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-cs"},"AppendLinkInput<object> appLinkInput = new AppendLinkInput<object>(YOUR_CONFIG.actionKey, data, TraceId);\nTraceState<object, object> state = await GetSdk().AppendLinkAsync(appLinkInput);\n")),Object(r.b)("p",null,"In the browser, assuming you are working with File objects, you can use:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-cs"},'IDictionary<string, object> data = new Dictionary<string, object> {\n  ["weight"] = "123",\n  ["valid"] = true,\n  ["operators"] = new string[] { "1", "2" },\n  ["operation"] = "my new operation 1"\n};\ndata.Add("Certificate1", FileWrapper.FromFilePath(Path.GetFullPath(filePath)));\ndata.Add("Certificates", new Identifiable[] { FileWrapper.FromFilePath(filePath});\n\nAppendLinkInput<object> appLinkInput = new AppendLinkInput<object>(YOUR_CONFIG.actionKey, data, TraceId);\nTraceState<object, object> state = await GetSdk().AppendLinkAsync(appLinkInput);\n')),Object(r.b)("p",null,"This record uniquely identifies the corresponding file in our service and is easily serializable. If you look in the ",Object(r.b)("inlineCode",{parentName:"p"},"headLink")," of the returned state, you will see that the ",Object(r.b)("inlineCode",{parentName:"p"},"FileWrapper")," have been converted to ",Object(r.b)("inlineCode",{parentName:"p"},"FileRecord")," types:"),Object(r.b)("p",null,"When you retrieve traces with the Sdk, it will not automatically download the files for you. You have to explicitely call a method on the Sdk for that purpose:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-cs"},"state = await GetSdk().GetTraceStateAsync<object>(new GetTraceStateInput(traceId));\nObject dataWithRecords = state.HeadLink.FormData();\n\nobject dataWithFiles = await GetSdk().DownloadFilesInObject(dataWithRecords);\nIDictionary<String, Property<FileWrapper>> fileWrappers = Helpers.ExtractFileWrappers(dataWithFiles);\nforeach (Property<FileWrapper> fileWrapperProp in fileWrappers.Values)\n{\n   WriteFileToDisk(fileWrapperProp.Value);\n}\n"))),Object(r.b)(o.a,{value:"java",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"AppendLinkInput<Object> appLinkInput = new AppendLinkInput<Object>(YOUR_CONFIG.actionKey, data, TraceId);\nTraceState<Object, Object> state = sdk.appendLink(appLinkInput);\n")),Object(r.b)("p",null,"In the browser, assuming you are working with File objects, you can use:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},'Map<String, Object> data = new HashMap<String, Object>();\n data.put("weight", "123");\n data.put("valid", true);\n data.put("operators", new String[]{"1", "2" });\n data.put("operation", "my new operation 1");\n\ndata.add("Certificate1",FileWrapper.fromFilePath(Path.getFullPath(filePath)));\ndata.add("Certificates", new Identifiable[] { FileWrapper.fromFilePath(filePath});\n\nAppendLinkInput<Object> appLinkInput = new AppendLinkInput<Object>(YOUR_CONFIG.actionKey, data, TraceId);\nTraceState<Object, Object> state = sdk.appendLink(appLinkInput);\n')),Object(r.b)("p",null,"This record uniquely identifies the corresponding file in our service and is easily serializable. If you look in the ",Object(r.b)("inlineCode",{parentName:"p"},"headLink")," of the returned state, you will see that the ",Object(r.b)("inlineCode",{parentName:"p"},"FileWrapper")," have been converted to ",Object(r.b)("inlineCode",{parentName:"p"},"FileRecord")," types:"),Object(r.b)("p",null,"When you retrieve traces with the Sdk, it will not automatically download the files for you. You have to explicitely call a method on the Sdk for that purpose:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"state = sdk.getTraceState<Object>(new GetTraceStateInput(traceId));\nObject dataWithRecords = state.HeadLink.FormData();\n\nObject dataWithFiles = sdk.downloadFilesInObject(dataWithRecords);\nIDictionary<String, Property<FileWrapper>> fileWrappers = Helpers.extractFileWrappers(dataWithFiles);\nfor (Property<FileWrapper> fileWrapperProp :  fileWrappers.Values)\n{\n   WriteFileToDisk(fileWrapperProp.Value);\n}\n")))))}b.isMDXComponent=!0}}]);