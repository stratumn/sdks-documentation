(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{78:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return b})),a.d(t,"toc",(function(){return p})),a.d(t,"default",(function(){return u}));var n=a(3),r=a(7),l=(a(0),a(92)),c=a(95),s=a(96),o={title:"\ud83d\udc80 Deprecated"},b={unversionedId:"deprecated",id:"deprecated",isDocsHomePage:!1,title:"\ud83d\udc80 Deprecated",description:"The following functionality will no longer be supported in future releases.",source:"@site/docs/deprecated.mdx",slug:"/deprecated",permalink:"/sdks-documentation/docs/deprecated",editUrl:"https://github.com/stratumn/sdks-documentation/docs/deprecated.mdx",version:"current",sidebar:"docs",previous:{title:"\ud83d\udcbe Handling files",permalink:"/sdks-documentation/docs/handling-files"}},p=[{value:"Requesting the transfer of ownership of a trace",id:"requesting-the-transfer-of-ownership-of-a-trace",children:[]},{value:"Responding to a transfer of ownership of a trace",id:"responding-to-a-transfer-of-ownership-of-a-trace",children:[]},{value:"Trace stages",id:"trace-stages",children:[]}],i={toc:p};function u(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},i,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"The following functionality will no longer be supported in future releases."),Object(l.b)("h3",{id:"requesting-the-transfer-of-ownership-of-a-trace"},"Requesting the transfer of ownership of a trace"),Object(l.b)("p",null,'You can "push" the trace to another group in the workflow this way:'),Object(l.b)(c.a,{groupId:"choosen-language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"C#",value:"csharp"},{label:"Java",value:"java"}],mdxType:"Tabs"},Object(l.b)(s.a,{value:"js",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-js"},'await sdk.pushTrace({\n  prevLink, // or traceId\n  recipient: YOUR_CONFIG.otherGroup,\n  data: {\n    why: "because",\n  },\n});\n'))),Object(l.b)(s.a,{value:"csharp",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-cs"},'IDictionary<string, object> data = new Dictionary<string, object>() { { "why", "because im testing the pushTrace 2" } };\n\nPushTransferInput<object> push = new PushTransferInput<object>(TraceId, recipient, data, prevLink);\nsomeTraceState = await GetSdk().PushTraceAsync<object>(push);\n'))),Object(l.b)(s.a,{value:"java",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-java"},'Map<String, Object> data =new HashMap<String, Object>( Collections.singletonMap("why", "because I\'m testing the pushTrace 2"));\n\nPushTransferInput<Object> push = new PushTransferInput<Object>(recipient, data, prevLink);\nsomeTraceState = sdk.pushTrace<Object>(push);\n\n')))),Object(l.b)("p",null,"The arguments are:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"recipient"),": the id of the group to push the trace to,"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"data"),": (optional) some data related to the push transfer,"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"prevLink")," or ",Object(l.b)("inlineCode",{parentName:"li"},"traceId"),".")),Object(l.b)("p",null,'You can also "pull" an existing trace from another group:'),Object(l.b)(c.a,{groupId:"choosen-language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"C#",value:"csharp"},{label:"Java",value:"java"}],mdxType:"Tabs"},Object(l.b)(s.a,{value:"js",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-js"},'await sdk.pullTrace({\n  prevLink, // or traceId\n  data: {\n    why: "because",\n  },\n});\n'))),Object(l.b)(s.a,{value:"csharp",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-cs"},'IDictionary<string, string> data = new Dictionary<string, string>() { { "why", "because im testing the pushTrace 2" } };\n\nPullTransferInput<object> pull = new PullTransferInput<object>(TraceId, data, prevLink);\nTraceState<object, object> statepul = await GetSdk().PullTraceAsync(pull);\n'))),Object(l.b)(s.a,{value:"java",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-java"},'Map<String, Object> data =new HashMap<String, Object>( Collections.singletonMap("why", "because I\'m testing the pushTrace 2"));\nPullTransferInput<Object> pull = new PullTransferInput<Object>(TraceId, data, prevLink);\nTraceState<Object, Object> statepul =  sdk.pullTrace(pull);\n')))),Object(l.b)("p",null,"And in this case, the arguments are:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"data"),": (optional) some data related to the pull transfer,"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"prevLink")," or ",Object(l.b)("inlineCode",{parentName:"li"},"traceId"),".")),Object(l.b)("p",null,"The Sdk will return the new state object of the trace. The shape of this object is the same as explained ",Object(l.b)("a",{parentName:"p",href:"#creating-a-new-trace"},"previously"),"."),Object(l.b)("p",null,"Notes:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"In both cases, the trace is not transferred automatically to or from the group. The recipient must respond to your request as we will see in the ",Object(l.b)("a",{parentName:"li",href:"#responding-to-a-transfer-of-ownership-of-a-trace"},"next section"),"."),Object(l.b)("li",{parentName:"ul"},"You don't need to provide a ",Object(l.b)("inlineCode",{parentName:"li"},"recipient")," in the case of a ",Object(l.b)("inlineCode",{parentName:"li"},"pullTransfer")," since the two parties of the transfer can be inferred (you and the current owner of the trace)."),Object(l.b)("li",{parentName:"ul"},"The ",Object(l.b)("inlineCode",{parentName:"li"},"data")," object argument is optional. When it is provided, it is a free form object that will not be validated against a JSON schema.")),Object(l.b)("h3",{id:"responding-to-a-transfer-of-ownership-of-a-trace"},"Responding to a transfer of ownership of a trace"),Object(l.b)("p",null,"When someone pushed a trace to your group, you can either accept or reject the transfer:"),Object(l.b)(c.a,{groupId:"choosen-language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"C#",value:"csharp"},{label:"Java",value:"java"}],mdxType:"Tabs"},Object(l.b)(s.a,{value:"js",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-js"},"await sdk.acceptTransfer({\n  prevLink, // or traceId\n});\n")),Object(l.b)("p",null,"Or:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-js"},'await sdk.rejectTransfer({\n  prevLink, // or traceId\n  data: {\n    reason: "no way!",\n  },\n});\n')),Object(l.b)("p",null,"Alternatively, if you have initiated the transfer (push or pull), you can also before it has been accepted:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-js"},"await sdk.cancelTransfer({\n  prevLink, // or traceId\n});\n"))),Object(l.b)(s.a,{value:"csharp",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-cs"},"TransferResponseInput<Object> trInput = new TransferResponseInput<Object>(TraceId, null, null);\nTraceState<Object, Object> stateAccept = await GetSdk().AcceptTransferAsync(trInput);\n")),Object(l.b)("p",null,"Or:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-cs"},"TransferResponseInput<Object> trInput = new TransferResponseInput<Object>(traceId, null, null);\nTraceState<Object, Object> stateReject = await GetSdk().RejectTransferAsync(trInput);\n")),Object(l.b)("p",null,"Alternatively, if you have initiated the transfer (push or pull), you can also cancel before it has been accepted:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-cs"},"TransferResponseInput<Object> responseInput = new TransferResponseInput<Object>(TraceId, null, null);\nTraceState<Object, Object> statecancel = await GetSdk().CancelTransferAsync(responseInput);\n"))),Object(l.b)(s.a,{value:"java",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-java"},"TransferResponseInput<Object> trInput = new TransferResponseInput<Object>(null,traceId);\nTraceState<Object, Object> stateAccept = sdk.acceptTransfer(trInput);\n")),Object(l.b)("p",null,"Or:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-java"},"TransferResponseInput<Object> trInput = new TransferResponseInput<Object>(null, traceId);\nTraceState<Object, Object> stateReject = sdk.rejectTransfer(trInput);\n")),Object(l.b)("p",null,"Alternatively, if you have initiated the transfer (push or pull), you can also cancel before it has been accepted:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-java"},"TransferResponseInput<Object> responseInput = new TransferResponseInput<Object>(null, traceId);\nTraceState<Object, Object> stateCancel = sdk.cancelTransfer(responseInput);\n")))),Object(l.b)("p",null,"In all cases, the arguments are:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"data"),": (optional) some data related to the pull transfer,"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"prevLink")," or ",Object(l.b)("inlineCode",{parentName:"li"},"traceId"),".")),Object(l.b)("p",null,"The Sdk will return the new state object of the trace. The shape of this object is the same as explained ",Object(l.b)("a",{parentName:"p",href:"#creating-a-new-trace"},"previously"),"."),Object(l.b)("p",null,"Notes:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"The ",Object(l.b)("inlineCode",{parentName:"li"},"data")," object argument is optional. When it is provided, it is a free form object that will not be validated against a JSON schema.")),Object(l.b)("h3",{id:"trace-stages"},"Trace stages"),Object(l.b)("p",null,"Your group in the workflow is composed of multiple stages. There are always 3 default stages:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Incoming"),": this stage lists all the traces that are being transferred to your group (push or pull),"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Backlog"),": this stage lists all the traces that have been transferred to your group and accepted,"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Outgoing"),": this stage lists all the traces that are being transferred to another group (push or pull).")),Object(l.b)("p",null,"The other stages are called ",Object(l.b)("inlineCode",{parentName:"p"},"Attestation")," stages. They compose the logic of your group in the context of this workflow."),Object(l.b)("p",null,"Notes:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"When someone pushes a trace to your group, it will appear in your ",Object(l.b)("inlineCode",{parentName:"li"},"Incoming")," stage and their ",Object(l.b)("inlineCode",{parentName:"li"},"Outgoing")," stage."),Object(l.b)("li",{parentName:"ul"},"When you accept a transfer, the trace will move to your ",Object(l.b)("inlineCode",{parentName:"li"},"Backlog")," stage."),Object(l.b)("li",{parentName:"ul"},"When you reject a transfer, the trace will move back to its previous ",Object(l.b)("inlineCode",{parentName:"li"},"Attestation")," stage and disappear from the ",Object(l.b)("inlineCode",{parentName:"li"},"Outgoing")," and ",Object(l.b)("inlineCode",{parentName:"li"},"Incoming")," stages it was in.")))}u.isMDXComponent=!0}}]);